configure(subprojects - project(':libraries:test-common')) {
    publishing {
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url project.hasProperty('NEXUS_SNAPSHOT_REPOSITORY_URL') ?
                            NEXUS_SNAPSHOT_REPOSITORY_URL : mavenLocal().url
                } else {
                    url project.hasProperty('NEXUS_RELEASE_REPOSITORY_URL') ?
                            NEXUS_RELEASE_REPOSITORY_URL : mavenLocal().url
                }
                credentials {
                    username project.hasProperty('NEXUS_USERNAME') ?
                            NEXUS_USERNAME : ""
                    password project.hasProperty('NEXUS_PASSWORD') ?
                            NEXUS_PASSWORD : ""
                }
                //                    url mavenLocal().url
            }
        }
        android.libraryVariants.all { variant ->
            publications {
                "$variant.name"(MavenPublication) {
                    groupId KAKAO_SDK_GROUP
                    version project.version
                    artifactId "${project.name}${variant.artifactIdSuffix}"
                    artifact sourcesJar
                    variant.outputs.collect { output ->
                        artifact(output.outputFile) {
                            builtBy variant.assemble
                        }
                    }

                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                        variant.compileConfiguration.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            if (it.hasProperty('dependencyProject')) {
                                dependencyNode.appendNode('groupId', it.group)
                                def flavor = android.dependencyFlavors[it.name]
                                List<String> idComponents = [it.name]
                                if (flavor) {
                                    idComponents.add(flavor)
                                }
                                if (variant.phase == 'real' && variant.buildType.name == 'debug') idComponents.add(variant.buildType.name)
                                if (variant.phase != 'real') idComponents.add(variant.phase)
                                String finalArtifactId = idComponents.join('-')
                                // kakao sdk modules
                                dependencyNode.appendNode('artifactId', finalArtifactId)
                                dependencyNode.appendNode('version', project.version)
                                dependencyNode.appendNode('type', ARTIFACT_TYPE)
                            } else {
                                // external dependencies
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }

                        def licenses = asNode().appendNode('licenses')
                        def license = licenses.appendNode('license')
                        license.appendNode('name', 'The Apache Software License, Version 2.0')
                        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                        license.appendNode('distribution', 'repo')
                    }
                }
            }
        }
    }

    ext.configurePublishProperties = { variant ->
        Collection<String> flavors = variant.baseName.split('-')
        variant.productFlavors.find { it.dimension == 'phase'}.each { phase ->
            variant.ext.phase = phase.name
            project."publish${phase.name.capitalize()}".dependsOn "publish${variant.name.capitalize()}PublicationToMavenRepository"
        }

        flavors.remove('release')
        if (variant.phase != 'real') {
            flavors.remove('debug')
        }
        flavors.remove('full')
        flavors.remove('real')

        String modifiedFlavor = flavors.join('-')
        variant.ext.artifactIdSuffix = modifiedFlavor == '' ? '' : "-$modifiedFlavor"
    }
}